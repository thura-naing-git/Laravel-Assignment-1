/*Encryption and Decryption

Cryptography is used to secure and protect data during communication. It is helpful to prevent unauthorized person or group of users from accessing any confidential data. 

Encryption and decryption are the two essential functionalities of cryptography. A message sent over the network is transformed into an unrecognizable encrypted message known as data encryption. At the receiving end, the received message is converted to its original form known as decryption.

Terms used in Cryptography are,
Plain text :- Original Message
Cipher text :- Encrypted Message
Keys :- Predefined values used for encrypting and decrypting (this can be common for both or different for each) below example common key is used ( define('ENCRYPTION_KEY', '__^%&Q@$&*!@#$%^&*^__'); )

The four ground principles of cryptography are

Confidentiality Defines a set of rules that limits access or adds restriction on certain information.
Data Integrity Takes care of the consistency and accuracy of data during its entire life-cycle.
Authentication Confirms the truth of an attribute of a datum that is claimed to be true by some entity.
Non-Repudiation Ensures the inability of an author of a statement resp. a piece of information to deny it.

PHP 7 ready version. It uses openssl_encrypt function from PHP OpenSSL Library. 
PHP code for encryption and decryption is following( lot of other methods are there here showing one example).
*/
<?php

class Openssl_EncryptDecrypt {
    // encryption function
    function encrypt ($pure_string, $encryption_key) {
        $cipher     = 'AES-256-CBC';
        $options    = OPENSSL_RAW_DATA;
        $hash_algo  = 'sha256';
        $sha2len    = 32;
        $ivlen = openssl_cipher_iv_length($cipher);
        $iv = openssl_random_pseudo_bytes($ivlen);
        $ciphertext_raw = openssl_encrypt($pure_string, $cipher, $encryption_key, $options, $iv);
        $hmac = hash_hmac($hash_algo, $ciphertext_raw, $encryption_key, true);
        return $iv.$hmac.$ciphertext_raw;
    }
    // decryption function
    function decrypt ($encrypted_string, $encryption_key) {
        $cipher     = 'AES-256-CBC';
        $options    = OPENSSL_RAW_DATA;
        $hash_algo  = 'sha256';
        $sha2len    = 32;
        $ivlen = openssl_cipher_iv_length($cipher);
        $iv = substr($encrypted_string, 0, $ivlen);
        $hmac = substr($encrypted_string, $ivlen, $sha2len);
        $ciphertext_raw = substr($encrypted_string, $ivlen+$sha2len);
        $original_plaintext = openssl_decrypt($ciphertext_raw, $cipher, $encryption_key, $options, $iv);
        $calcmac = hash_hmac($hash_algo, $ciphertext_raw, $encryption_key, true);
        if(function_exists('hash_equals')) {
            if (hash_equals($hmac, $calcmac)) return $original_plaintext;
        } else {
            if ($this->hash_equals_custom($hmac, $calcmac)) return $original_plaintext;
        }
    }
    /**
     * (Optional)
     * hash_equals() function polyfilling.
     * PHP 5.6+ timing attack safe comparison
     */
    function hash_equals_custom($knownString, $userString) {
        if (function_exists('mb_strlen')) {
            $kLen = mb_strlen($knownString, '8bit');
            $uLen = mb_strlen($userString, '8bit');
        } else {
            $kLen = strlen($knownString);
            $uLen = strlen($userString);
        }
        if ($kLen !== $uLen) {
            return false;
        }
        $result = 0;
        for ($i = 0; $i < $kLen; $i++) {
            $result |= (ord($knownString[$i]) ^ ord($userString[$i]));
        }
        return 0 === $result;
    }
}

// encryption key definese here
define('ENCRYPTION_KEY', '__^%&Q@$&*!@#$%^&*^__');
$string = "This is the original string!";
echo "This is the original string!";
echo "<br>";
$OpensslEncryption = new Openssl_EncryptDecrypt;
$encrypted = $OpensslEncryption->encrypt($string, ENCRYPTION_KEY);
echo "Encrypted Message     ";
echo $encrypted ;
$decrypted = $OpensslEncryption->decrypt($encrypted, ENCRYPTION_KEY);
echo "<br>";
echo "Decrypted Message     ";
echo $decrypted ;

?>
